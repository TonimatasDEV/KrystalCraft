plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = archives_base_name + "Fabric-" + mod_version
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    // Dependencies (OPTIONAL)
    modApi "dev.architectury:architectury-fabric:${architectury_version}" // Architectury

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    var replaceProperties = [
            mod_version: mod_version, mod_name: mod_name, mod_license: mod_license,
            fabric_loader_range: fabric_loader_range, fabric_minecraft_version_range: fabric_minecraft_version_range,
            fabric_architectury_version_range: fabric_architectury_version_range]
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}