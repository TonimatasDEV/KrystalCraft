plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = "KrystalCraftForge-" + mod_version
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"
    modApi "earth.terrarium:botarium-forge-${minecraft_version}:${botarium_version}"
    modImplementation "com.teamresourceful.resourcefullib:resourcefullib-forge-${minecraft_version}:${resourcefullib_version}"

    modCompileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

    modImplementation "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FORGE"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources', 'src/generated']
        }
    }
}

processResources {
    var replaceProperties = [
            mod_version: mod_version, mod_name: mod_name, mod_license: mod_license,
            forge_loader_range: forge_loader_range, forge_minecraft_version_range: forge_minecraft_version_range]
    inputs.properties replaceProperties

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "krystalcraft-" + project.name
            from components.java
        }
    }

    repositories {

    }
}
